[
  {
    "date": "2020-09-07T09:16:02.000Z",
    "title": "创建Entity",
    "content": "---\ntitle: \"创建Entity\"\ndate: 2020-09-07T17:16:02+08:00\ndraft: false\narchives : \"2020/09\"\n---\n\n### 1.通过预制体创建entity\n\n```csharp\nusing Unity.Entities;\nusing Unity.Mathematics;\nusing Unity.Transforms;\nusing UnityEngine;\npublic class Spawner_FromMonoBehaviour : MonoBehaviour\n{\n    public GameObject Prefab;\n    void Start(){\n        var settings = GameObjectConversionSettings.FromWorld(World.DefaultGameObjectInjectionWorld, null);\n        var prefab = GameObjectConversionUtility.ConvertGameObjectHierarchy(Prefab, settings);\n        var entityManager = World.DefaultGameObjectInjectionWorld.EntityManager;\n        for (var x = 0; x < 100; x++)\n        {\n            for (var y = 0; y < 100; y++)\n            {\n                // Efficiently instantiate a bunch of entities from the already converted entity prefab\n                var instance = entityManager.Instantiate(prefab);\n\n                // Place the instantiated entity in a grid with some noise\n                var position = transform.TransformPoint(new float3(x * 1.3F, noise.cnoise(new float2(x, y) * 0.21F) * 2, y * 1.3F));\n                entityManager.SetComponentData(instance, new Translation {Value = position});\n            }\n        }\n    }\n\n}\n\n```\n![img](Zo7lBtUMXi.gif)\n\n### 2.ConvertToEntity组件\n为节点添加ConverToEntity组件，ecs系统会自动将该节点在运行时转换为实体\n\n![img](Snipaste_2020-09-07_17-31-44.png)\n\n### 3.Convert Callback\n```csharp\n//需要ConverToEntity组件\n[RequiresEntityConversion]\npublic class Spawner : MonoBehaviour, IConvertGameObjectToEntity\n{\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        var data = new CustomData();\n        dstManager.AddComponentData(entity, data);\n    }\n}\n```",
    "draft": false,
    "archives": "2020/09",
    "route": "post/2020/9/创建Entity/"
  },
  {
    "date": "2020-08-26T03:56:38.000Z",
    "title": "Unity SubScene",
    "content": "---\ntitle: \"Unity SubScene\"\ndate: 2020-08-26T11:56:38+08:00\ndraft: true\ntags: [\"Unity\",\"DOTS\"]\narchives : \"2020/08\"\n---\n\n## SubScene\n超大世界解决方案\n\n选中需要转换的节点，右键添加到subscene\n\n![img](Snipaste_2020-08-26_17-47-30.png)\n\n![img](Snipaste_2020-08-26_17-49-53.png)\n\n或者直接为一个节点添加sunscene组件并选择scene资产文件\n\nsubscene会被自动转换成ecs实体\n![img](Snipaste_2020-08-26_17-52-52.png)\n",
    "draft": true,
    "tags": [
      "Unity",
      "DOTS"
    ],
    "archives": "2020/08",
    "route": "post/2020/8/Unity SubScene/"
  },
  {
    "date": "2020-07-25T04:08:21.000Z",
    "title": "Unity 2020.1 release 新功能",
    "content": "---\ntitle: \"Unity 2020.1 release 新功能\"\ndate: 2020-07-25T12:08:21+08:00\ntags: [\"Unity\",\"Feature\"]\ndraft: false\narchives : \"2020/07\"\n---\n\n## 编辑器和工作流\n### 在场景中编辑预制体\n三种显示模式，帮助编辑\n\n![img](Snipaste_2020-07-25_14-36-44.png)\n\n### 包管理UI更新，\n\n![img](Snipaste_2020-07-25_16-40-03.png)\n\n开启预览包需要从project中设置\n\n![img](Snipaste_2020-07-25_16-37-34.png)\n\n### 移除了对Chromium Editor Framework的支持\n包体小了\n### 轴转换烘培\nfbx导入资产可能存在轴方向错误的问题\n\n![img](Snipaste_2020-07-25_17-58-34.png)\n\n### 资产导入管线v2\n单独的属性窗口,单独的组件窗口\n\n![img](Snipaste_2020-07-25_17-56-50.png)\n\n### 后台任务窗口\n创建一个组件，引入UnityEditor，通过Process来执行一个异步任务，并通知给任务窗口显示\n```csharp\nusing UnityEditor;\npublic IEnumerator Run_OneTask()\n    {\n        // Create a new progress indicator\n        int progressId = Progress.Start(\"Running one task\", \"description\");\n\n        // Report the progress status at anytime\n        for (int frame = 0; frame <= 1000; ++frame)\n        {\n            Progress.Report(progressId, frame / 1000.0f);\n\n            // Do something else\n            yield return null;\n        }\n\n        // The task is finished. Remove the associated progress indicator.\n        Progress.Remove(progressId);\n    }\n```\n![img](Snipaste_2020-07-25_18-21-53.png)\n### Unity Accelerator\n局域网代理和缓存服务\n### Addressables 改进\n### 其他\n\n剪切，粘贴\n\n![img](Snipaste_2020-07-25_20-29-10.png)\n\n\n## 程序工具\n\n### Profiler 工具改进\n### Profiler 独立程序\n### Visual Studio 集成 \n### New C# debugging workflow\n### 支持泛型类型域\n简化了对泛型类型的支持，旧版本中需要手动实现一个继承自泛型的类型，使用该类型作为属性，新版本中则可以直接在组件中引用泛型类型，让属性面板正确显示我们指定的样式\n ```csharp\n namespace OldVersion\n{\n    public class SerializeFieldTest : MonoBehaviour\n    {\n        public GenericClassOfString stringClassField;\n    }\n    public class GenericClass<T> \n    {\n        public T test;\n    }\n    [Serializable]\n    public class GenericClassOfString : GenericClass<string> { }\n\n}\n ```\n  ```csharp\nnamespace NewVersion\n{\n    public class SerializeFieldTest1 : MonoBehaviour\n    {\n        public GenericClass<string> stringClassField;\n    }\n    [Serializable]\n    public class GenericClass<T>\n    {\n        public T test;\n    }\n}\n ```\n ### Burst Compiler 1.3\n ### Profile Analyzer\n\n ## 美术工具\n ### Burst编译提升2D动画性能\n\n ### 2D Sprite Shape\n 2D Sprite Shape是2D图形变形工具，适合制作不规则的虚幻贴图设计，迪休自动调整，材质自动修正等方便场景设计的2D图片功能\n\n 1.角样式，不必单独设置角精灵\n\n 2.网格烘培\n ### 2D模板项目更新\n ### 2D物理更新\n ### Cinemachine改进\n ### 动画更新\n Animation Rigging 是一套用来制作3D骨骼关节行为的的套件，设置很多不同的约束器，让运动看起来更自然，可以大量减少动画文件的浪费\n\n Kinematica是一套次世代的角色动画系统\n\n ## 图形\n ### 相机栈\n [learn more](https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@7.2/manual/camera-stacking.html)\n ### 灯光更新\n\n 灯光设置现在是一个资产文件了，不再是场景文件的一部分\n\n ### Overlap-free packing\n\n 自动打包边距，避免光照贴图的重叠\n \n![img](Snipaste_2020-07-26_18-46-11.png)\n\n### CPU和GPU光照贴图改进\n### 光照贴图改进\n减少了烘培时间\n\n### Lightmapped cookie support\n### Contributors/Receivers Scene View Mode\n### Ray tracing for animated Meshes\n射线追踪动画网格\n\n[get started](https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Ray-Tracing-Getting-Started.html)\n\n### Streaming Virtual Texturing\n高分纹理，减少GPU内存和纹理加载时间\n\n## 平台\n### 输入系统\n\n## Pre-release tech\n### UI Toolkit\n用来构建UGUI程序，方便安排UI和风格\n### Kinematica\n次世代动画套件\n### Animation Rigging\n动画绑定，创建骨骼约束，减少动画文件大小\n### Cinemachine\n运镜系统\n### Device Simulator\n设备模拟器\n### New caching shader preprocessor\n新的着色器缓存预处理，帮助快速构建\n### Code Coverage\n代码覆盖率测试\n### Terrain Tools\n地形工具\n### Streaming Virtual Texturing\n流式虚拟纹理\n### 光追\n### UI Builder\n可视化的编辑器UI构建工具\n### Havok Physics\nHavok物理引擎\n### Unity Physics\nUnity物理系统，基于DOTS技术栈\n### Memory Profiler\n内存分析器\n### Vector Graphics\n矢量图形工具，最大的发挥矢量图的优势\n### Experimental 2D Graphics Features\n2Drender和通用渲染管线兼容，相机栈，2D阴影\n### Build Report Inspector\n构建报告属性检查器\n### Sprite Atlas v2\nv2图集\n### Pixar’s Universal Scene Description\n皮克斯文件，一种大型资产文件格式",
    "tags": [
      "Unity",
      "Feature"
    ],
    "draft": false,
    "archives": "2020/07",
    "route": "post/2020/7/Unity 2020.1 release 新功能/"
  },
  {
    "date": "2020-07-21T14:58:21.000Z",
    "title": "简单的DOTS示例-物体旋转",
    "content": "---\ntitle: \"简单的DOTS示例-物体旋转\"\ndate: 2020-07-21T22:58:21+08:00\ndraft: false\ntags: [\"Unity\",\"Sample\",\"DOTS\"]\narchives : \"2020/07\"\n---\n#### packages:\n> Hybrid Renderer  --- 提供用于渲染ECS实体的系统和组件。Hybrid Renderer不是渲染管道：它是一个收集渲染ECS实体所需的数据并将此数据发送到Unity现有渲染架构的系统。\n\n\n![img](Snipaste_2020-08-26_11-17-15.png)\n\n![img](Snipaste_2020-08-26_11-36-58.png)\n\n\nconvertToEntity 用来将实例转换为Entity\n\n\nRotationData.cs\n```csharp\nusing Unity.Entities;\n[GenerateAuthoringComponent]\npublic struct RotationData : IComponentData\n{\n    public float speed;\n}\n\n```\n将[GenerateAuthoringComponent]属性添加到IComponentData声明中。 Unity自动生成一个MonoBehaviour类，该类包含组件的公共字段，并提供一个Conversion方法，将这些字段转换为运行时组件数据，这样才能将data最为组件挂载到GameObject上，并暴露公共属性在属性面板上。\n```csharp\n[GenerateAuthoringComponent]\n```\nRotationSystem.cs\n```csharp\nusing Unity.Entities;\nusing Unity.Jobs;\nusing Unity.Mathematics;\nusing Unity.Transforms;\npublic class RotationSystem : SystemBase\n{\n    protected override void OnUpdate()\n    {\n        float deltaTime = Time.DeltaTime;\n        Entities.ForEach((ref Rotation rotation,in RotationData rotationData) =>\n        {\n            rotation.Value = math.mul(math.normalize(rotation.Value),quaternion.RotateY(math.radians(rotationData.speed * deltaTime)));\n        }).ScheduleParallel();\n    }\n}\n\n```\n\n\n效果\n\n![img](upXVL7TmdK.gif)\n\n\n检视Entity Debugger面板\n\n![img](Snipaste_2020-08-26_11-49-23.png)\n\n## IJobChunk的使用\n\n组件类型的唯一组合称为原型（Archetypes），而原型内部以块（chunk）为单位存储，即当一个块容量满了就会重新开启一个块来存储\n\n可以通过IJobChunk来逐块遍历数据，达到快速读取和批量处理的目的，更多的代码设置换取更高的性能。\n\n![img](Snipaste_2020-08-26_16-14-18.png)\n\nRotationIJobData.cs\n```csharp\nusing Unity.Entities;\nusing System;\n\n[Serializable]\npublic struct RotationIJobData : IComponentData\n{\n        public float speed;\n}\n\n```\nRotationIJobDataAuthoring.cs\n```csharp\nusing Unity.Entities;\nusing UnityEngine;\npublic class RotationIJobDataAuthoring : MonoBehaviour, IConvertGameObjectToEntity\n{\n    public float speed = 360;\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        var data = new RotationIJobData { speed = speed };\n        dstManager.AddComponentData(entity, data);\n    }\n}\n```\nRotationIJobSystem.cs\n```csharp\nusing Unity.Burst;\nusing Unity.Collections;\nusing Unity.Entities;\nusing Unity.Jobs;\nusing Unity.Mathematics;\nusing Unity.Transforms;\npublic class RotationIJobSystem : SystemBase\n{\n\n    //要处理的实体集\n    EntityQuery entityQuery;\n    protected override void OnCreate()\n    {\n        //缓存指定类型的查询\n        entityQuery = GetEntityQuery(typeof(Rotation), ComponentType.ReadOnly<RotationIJobData>());\n    }\n    //定义作业块结构体\n    [BurstCompile]\n    struct RotationJobChunk : IJobChunk\n    {\n        public float deltaTime;\n        public ComponentTypeHandle<Rotation> RotationType;\n        [ReadOnly] public ComponentTypeHandle<RotationIJobData> RotationIJobType;\n        public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex)\n        {\n            //通过原型块获取实体数组\n            var rotationChunk = chunk.GetNativeArray(RotationType);\n            var rotationIJobChunk = chunk.GetNativeArray(RotationIJobType);\n            for (int i = 0; i < chunk.Count; i++)\n            {\n                var rotation = rotationChunk[i];\n                var rotationData = rotationIJobChunk[i];\n                rotationChunk[i] = new Rotation\n                {\n                    Value = math.mul(math.normalize(rotation.Value),quaternion.RotateY(math.radians(rotationData.speed * deltaTime)))\n                };\n            }\n        }\n    }\n    protected override void OnUpdate()\n    {\n        //实例化作业并调度\n        var rotation = GetComponentTypeHandle<Rotation>();\n        var rotationData = GetComponentTypeHandle<RotationIJobData>(true);\n        var job = new RotationJobChunk(){\n            RotationType = rotation,\n            RotationIJobType = rotationData,\n            deltaTime = Time.DeltaTime\n        };\n        Dependency = job.Schedule(entityQuery,Dependency);\n    }\n}\n```",
    "draft": false,
    "tags": [
      "Unity",
      "Sample",
      "DOTS"
    ],
    "archives": "2020/07",
    "route": "post/2020/7/简单的DOTS示例-物体旋转/"
  },
  {
    "date": "2020-06-27T15:50:44.000Z",
    "title": "DOTS Sample",
    "content": "---\ntitle: \"DOTS Sample\"\ndate: 2020-06-27T23:50:44+08:00\nslug: \"DOTS Sample\"\ndescription: \"\"\nkeywords: [\"Unity\",\"Sample\"]\ndraft: true\ntags: [\"Unity\",\"Sample\"]\narchives : \"2020/06\"\n---\n",
    "slug": "DOTS Sample",
    "description": "",
    "keywords": [
      "Unity",
      "Sample"
    ],
    "draft": true,
    "tags": [
      "Unity",
      "Sample"
    ],
    "archives": "2020/06",
    "route": "post/2020/6/DOTS Sample/"
  },
  {
    "date": "2020-06-18T15:34:23.000Z",
    "title": "Unity2020路线图 核心引擎和创作者工具",
    "content": "---\ntitle: \"Unity2020路线图 核心引擎和创作者工具\"\ndate: 2020-06-18T23:34:23+08:00\nslug: \"Unity2020路线图 核心引擎和创作者工具\"\ndescription: \"\"\nkeywords: [\"Unity\"]\ndraft: false\ntags: [\"Unity\"]\narchives : \"2020/06\"\n---\n![img](Snipaste_2020-06-27_13-18-11.png)\n路线图专注从以下四个方面说明\n* 可靠性和性能\n* 创作工作流\n* 拓展性\n* 抓住用户\n\n产品将以三个版本进行展示\n* 正式版\n* 预览版\n* 开发版\n\n## 可靠性和性能\n\n放缓了发布频率和数量，提高稳定性和产品质量，unity的技术方向专注在一些新的技术领域如SRPs,DOTS,UIElemenmts\n\n### 产品定位\n![img](Snipaste_2020-06-27_11-58-33.png)\n#### Released\n《FPS Sample Game》,《Megacity》unity的大城市demo\n* FPS Sample\n    * HDRP(高清渲染管线)\n    * NetCode（DOTS项目网络模型，包含的网络代码提供了客户端预测、授权服务器和插值功能，让创建网络 FPS 游戏变得更加容易）\n* Megacity demo\n    * Hybrid renderer（提供使用DOTS绘制网格的系统和组件，包括对实例网格渲染和LOD的支持）\n    * Sub-Scene workflows\n\n\n#### Prerelease\nDOTS sample ---- a third-person networked game,展示了NetCode和大量新的DOTS强大的特性例如Unity Physics\n* DOTS Sample\n    * Unity Physics（DOTS物理系统）\n    * Animation low-level\n    * NetCode(DOTS网络模型)\n    * Live Link（实时真机调试，保存场景就会直接推送给正在运行的设备）\n\n#### In Development\n一个大型开放世界射击游戏，其中涉及我们最新的环境系统和大量DOTS-powered特性\n* Large open-world shooter(pre-production)\n    * Streaming\n    * Networking\n    * Iteration on large Scenes\n    * New Environment system\n    * Animation & Unity Physics tooling\n\n### 包管理\n![img](Snipaste_2020-06-27_17-35-20.png)\n#### Released\n统一编辑器内包管理体验以提供原生商店-我的资源的支持\n* 我的资源    \n    * 整合了原生编辑器商店\n    * 下载，导入，升级，购买\n#### Prerelease\n编辑器内我的资源，将有更棒的性能和浏览体验，支持拓展自定义包工作流，支持npm域注册和git仓库子目录\n* 改善我的资源性能和浏览用户体验\n* 资料库域的验证\n* 通过住git仓库的子文件夹安装\n\n#### In Development\n改善大规模包管理体验\n* unity包资料库支持组过滤和分类\n* 大量安装和卸载多个包\n* 基于SAT解释器的包依赖的解决方案\n\n### 分析和性能优化\n![img](Snipaste_2020-06-27_17-41-58.png)\n#### Released\n在过去的一年中，在性能分析器上投入更多精力\n#### Prerelease\n升级内存性能分析工具，更快，更稳定，开销更小，添加元数据，分析作业系统，文档也做了全面的更新\n#### In Development\n支持自定义runtime counters\n\n## 创意工作流\n### 2D\n![img](Snipaste_2020-06-27_17-46-55.png)\n#### Released\n多样的世界构建方式支持，支持PSD分层文件，cinemachine支持更好的像素渲染\n* 2D Animation\n* 2D PSD Importer\n* 2D Sprite Shape\n* 2D Pixel Perfect(Standalone)\n#### Prerelease\n2D模板项目，提升2d渲染，并将通用渲染管线作为标准，2d光照，阴影，辅助纹理和Shader Graph支持的更好\n* Improved 2D Template\n* 2D Renderder\n#### In Development\n更稳，更强\n* Improved 2D workflows\n* Imporved 2d performance\n\n像《奥日》一样\n### 程序\n![img](Snipaste_2020-06-27_18-20-29.png)\n#### Released\n可配置Play mode，减少迭代时长，Burst Compiler,未来平台支持\n* Burst 1.2\n    * 多线程编译（standalone player）\n    * 新平台支持\n* Entities.ForEach 实体遍历\n* 可配置Enter Play mode\n* 脚本补丁\n* JetBrains Rider 集成包\n* VS code 集成包\n#### Prerelease\nBurst Compiler作为开发工具支持原生调试\n* Burst 1.3\n    * 原生调试\n    * 混淆控制\n    * 桌面交叉编译支持\n* Visual Studio 集成包\n* IL2CPP 改进编译体验\n#### In Development\nVisual Scripting，可视化编程\n* Visual Scripting\n* 稳定的Entities Core API\n* New Entities Debugger\n* 减少IL2CPP 转换时间\n* Roslyn Analyzer 支持\n### 编辑器\n![img](Snipaste_2020-06-27_18-26-35.png)\n#### Released\n新主题，快捷定制化管理支持\n* 高分辨率支持\n* 项目设置\n* 快捷管理\n* 快速搜索\n* 现代化主题\n* 嵌套预制体，变体\n* 预制体模式\n#### Prerelease\n编辑器选择管理优化，大规模预制体编辑，新的预制体编辑视图\n* Activity reporting\n* Editor Speed\n* Prefab Mode in-content\n* Focused Inspector\n* Code optimization switching\n* Scene Templates\n#### In Development\n全新的工作流，全新的面板和编辑窗口\n* Multi-document opening\n* WorkSpaces\n* Query Engine\n* Prefab encapsulation\n* Prefab performance improvement\n* Scene overlay tooling\n\n### 生活品质的改善\n![img](Snipaste_2020-06-27_18-33-27.png)\n#### Prerelease\n多处copy paste 体验修改\n* 属性面板的copy-paste\n* 层级树的剪切粘贴\n* 改善材质，3D纹理和立方图的属性面板预览\n#### In Development\n* 属性面板，重排序数组\n* Default parent object in Hierarchy view\n* 改善层级树拖放体验\n* 层级数支持文件夹（组，替代之前使用一个空的实体来管理）\n### 动画\n![img](Snipaste_2020-06-27_18-35-56.png)\n#### Released\n简单的可视化界面创建和管理timeline事件\n* Timeline通知和标记\n#### Prerelease\nAnimation Rogging，KeyFraming Runtime Rig，Kinematica\n* Animation Rigging\n* KeyFraming Runtime Rig\n* Kinematica\n#### In Development\nDOTS Animation 全家桶\n* DOTS Animation system\n* DOTS Animation Graph\n* DOTS Animation State Machine\n* DOTS Timeline\n### Ligting 光照\n![img](Snipaste_2020-06-27_18-41-13.png)\n\n#### Released\n改善HDRP对预算光照的支持，改善聚光灯，新的盒灯和金字塔灯，提升复杂光照质量\n* HDRP light support and inner cone angle for spotlights\n* Imporved direct sampling\n* Fiexible sample counts for probes\n* Scene View exposure controls\n* AMD Radeon Pro Denoiser\n* Light Probe merging\n* Submesh support for GPU Lightmapper\n#### Prerelease\n单独的场景光设置，便于复用，Overlap Free Packing，新的场景查看模式以便确认你的设置，Cookie.IES light emitter and many GPU Lightmapper features\n* Lighting Settiong Assets\n* Overlap-free packing\n* Scene View mode for debugging precomputed lighting\n* Cookie/IES support\n* Russian Roulette\n* GPU Lightmapper feature complete\n\n#### In Development\n* GPU Lightmapper -Out of Preview\n* Adaptive sampling\n* Scene-independent lighting presets\n* Blue Noise sampling\n* Light grid improvements\n* DOTS support for global illumination backend\n### World-building\n![img](Snipaste_2020-06-27_18-46-07.png)\n\n#### Released\nProBuilder 和 Polybrush，新的地形工具\n* ProBuilder 4.0\n* Polybrush 1.0\n* Scene visibility\n* Scene lock\n* Imporved grids\n* Terrain brushed\n* Terrain holes\n#### Prerelease\n统一的操作和体验\n* Prefab handles\n* ProBuilder 4.3\n#### In Development\n改善操作体验，基于C#的环境系统，为ProBuilder和Polybrush添加高级特性\n* New Environment System\n* Unified spline and brushes\n* Customizable toolbars and windows\n* Snap,align and position improvements\n### Visial Effects 视觉效果\n![img](Snipaste_2020-06-27_18-49-25.png)\n\n#### Released\n在visual effects中使用shader graphs，visual effect graph预览\n* shader load time reduced by 40%\n* Use Shader Graph shaders in VFX Graph\n* Shader Graph\n    * Render State Settings per material\n    * Shader LOD\n    * HDRP DXR Subshader Switch\n* VFX Graph \n    * Particel Strips\n    * Motion Vectors\n    * Per Spawn Time/Loop/Delay\n#### Prerelease\n稳定性和bug修复\n* Shader loading time reduced by 50%\n* Stablization and bug focused release\n#### In Development\n更多特效C#API\n* Shader Graph\n    * Cross Pipeline workflows\n    * Splitting Shader Graph Output into stage Blocks\n    * Custom Material Oms[extprs for Graphs\n    * Extensiblility Through Injection Points,Overrides,and Custom Output Targets\n* VFX Graph\n    * Foundational work for plublic API\n    * Debugging tools & Mesh sampling\n\n### UI Development\n![img](Snipaste_2020-06-27_18-53-47.png)\n#### Released\n新的保留模式API处理复杂编辑器绘制，方法和层级样式分离，使用UXML资产文件声明你的层级和样式，UXML文件是定义用户界面逻辑结构的文本文件。 UXML文件中使用的格式灵感来自HTML(超文本标记语言)、XAML(可扩展应用程序标记语言)和XML(可扩展标记语言)，UXMl资产有助于复用\n* VisualElement API\n* Layout engine\n* UI Renderer\n* UI assets(UXML & USS)\n* Event System\n* UI Debugger\n#### Prerelease\n强大的UI Builder工具提供更友好的UI界面创作\n* Runtime support\n* UI Builder tooling\n* Rich text\n#### In Development\n轻松创建高动态用户交互的能力，支持高级CSS特性，如变换，动画，渐变，滤镜，支持矢量绘图\n* UI Animation\n* Vector Graphics support\n* Responsive UI\n* World space UI\n* Custom Shaders\n* Timeline and Visual Scripting integration\n\n### Samrt Design & Creation\n![img](Snipaste_2020-06-27_19-30-52.png)\n\n#### Released\n给大型工作室，发布了ArtEngine工具，使用Creative AI的内容创建工具打造基于真实世界世界数据的超现实PBR材质，帮助缩小高速增长的内容需求和当前有限的效果生产能力\n* ArtEngine \n#### Prerelease\nUnity Game Simulation云模拟服务，AI Planner智能规划，AI Planner程序包可以生成用于最佳方案的代理AI，故事情节生成/管理，游戏/模拟验证，教程创建，自动化测试等的最佳计划。 软件包中提供了通用计划程序框架，创作工具和计划可视化程序。Unity ML-Agents深度学习用来进行部署，以控制NPC行为，自动化测试，评估设计决策\n* Unity ML-Agents\n* Unity Game Simulation\n* AI Planner\n#### In Development\n* Unity ML-Agents 1.0\n* ArtEngine\n\n### Audio & Video\n![img](Snipaste_2020-06-27_22-08-34.png)\n\n#### Released\nwindow硬件加速\n* Windows Hardware acceleration\n\n#### Prerelease\n低级渲染和和声引擎，录制器\n* DSPGraph - Low level rendering/mising audio engine\n* Recorder\n\n#### In Development\nDOTS媒体，离线视频录制器\n* DOTS.Audio/DOTS/Media\n* High end offline video recording\n\n### Camera Design\n![img](Snipaste_2020-06-27_22-24-58.png)\n\n#### Released\n* HDRP 7 support\n* Pixel-perfect support\n#### Prerelease\n* Improved Timeline tooling\n* 2 new specialized rigs for 3rd-person\n* Frame recomposer\n#### In Development\n* Cinemachine for DOTS\n\n\n\n## Scalable Quality\n### Working with assets\n![img](Snipaste_2020-06-27_22-28-31.png)\n\n#### Released\n全新资源导入管线，按需导入，更快\n* Accelerator（局域网缓存服务器）\n* New Asset Import Pipline\n* Fast Platform Switching\n* Dynamic Dependency tracking\n* Foundation for OnDemand mode\n* Addressable Asset System\n#### Prerelease\n系统API监听替代全部扫描获得更快的资产刷新，大大减轻任务切换痛苦\n* Director Monitoring\n* Texture MipMap Stripping\n#### In Development\n按需导入，合并构建管线和导入管线共享缓存数据\n* Cache consistenct checking\n* On-Demand Importing\n\n\n### Universal Rendering\n![img](Snipaste_2020-06-27_22-49-45.png)\n\n通用渲染管线\n#### Released\n* Optimized Post-Processing 优化后处理\n* Shadow Mask Support 阴影遮罩支持\n* Increased Light Limit 对灯光的限制减少\n#### Prerelease\n多相机\n* Camera stacking\n#### In Development\n使用通用渲染管道替换默认渲染器\n* Ambient Occlusion Support  环境光遮罩支持\n* Deferred Renderer 延迟渲染\n* Imporoved Shader Stripping 改善着色器剔除\n* Post Processing Custom Effects 自定义后处理效果\n\n\n### High Definition Rendering\n![img](Snipaste_2020-06-27_22-53-16.png)\n\n#### Released\n* Physically based Sky\n* Look Dev\n* HDRP scalability settiongs\n\n#### Prerelease\n* Streaming Virtual Texturing test project\n* Ray tracing\n* Hybird Renderer V2 Support\n#### In Development\n* Decal layers\n* HDR screen support\n* Hybrid Renderer\n* Integrated Streraming Virtual Texturing\n* Procedural Virtual Texturing\n* Raytracing Scalability Settings\n\n\n![img](Snipaste_2020-06-27_22-53-24.png)\n![img](Snipaste_2020-06-27_22-53-36.png)\n![img](Snipaste_2020-06-27_22-53-45.png)\n![img](Snipaste_2020-06-27_22-53-58.png)\n\n### Physics\n![img](Snipaste_2020-06-27_22-55-49.png)\n![img](Snipaste_2020-06-27_22-57-31.png)\n\n\n#### Released\n* Unity Physics\n    * Terrain collider\n    * Single threded immediate mode Simulation\n* Havok Physics support\n#### In Development\n* Unity Pyhsics simulation stability improvements\n* Physics-based animation\n* Ragdolls and joints\n* Character Controller\n\n\n## Reaching your audience\n### Connected Games\n![img](Snipaste_2020-06-27_23-00-07.png)\n\n#### Released\n* 多人\n    * 游戏服务器编排工具\n    * 全球数据中心覆盖\n    * 多云实现\n* Vivox 继承语音聊天，即时讯息发送\n* deltaDNA 目标和数据挖掘\n* 服务器运行时支持Linux IL2CPP\n\n#### Prerelease\n* 服务器运行时改进\n    * Windows/MacOS 到Linux的交叉编译器\n    * PlayerLoop脚本编辑器\n* Matchmaking closed beta\n* deltaDNA -Predictive churn segments\n* Transport and NetCodfe for DOTS sample\n* Unity Transport\n    * 重构 backend，拓展平台范围\n    * 支持IPv6\n#### In Development\n* DOTS Server Runtime\n* Unity Transport 认证\n* UnityNetCode\n* Lobby -persistent connection & offline mode\n* Frineds -cross platform\n\n\n### Mobile Platform\n![img](Snipaste_2020-06-27_23-01-32.png)\n\n#### Released\n* Unity as a Library\n* On-Demand REndering\n* Optimized Frame Pacing\n* Local Shader Keyword\n* Iteration -Script Only patching(Android)\n* Android Logcat iintegration\n* Mobile Notifications\n* Android ARM 64bit support\n* Adaptive Performance\n#### Prerelease\n* Device Simulator\n#### In Development\n* Metal & Vulkan improvements\n* Support for IOS/Android new Versions\n\n### Project Tiny\n![img](Snipaste_2020-06-27_23-02-44.png)\n#### Prerelease\n* 3D rendering and Physics\n* Basic animation/input/audio\n* 2D foundation for rendering and physical collision detections\n* initial platform support IOS,Android and Web(WASM/ASMJS)\n#### In Development\n* Improvement of current feature in Preview\n* Single HTML export for Playable Ads\n* Mobile lifecycle events\n* UIElements subset\n\n### XR Platfroms\n![img](Snipaste_2020-06-27_23-05-05.png)\n#### Released\n#### Prerelease\n#### In Development\n",
    "slug": "Unity2020路线图 核心引擎和创作者工具",
    "description": "",
    "keywords": [
      "Unity"
    ],
    "draft": false,
    "tags": [
      "Unity"
    ],
    "archives": "2020/06",
    "route": "post/2020/6/Unity2020路线图 核心引擎和创作者工具/"
  }
]