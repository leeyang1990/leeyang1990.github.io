<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2020/09 on leeyang1990</title>
    <link>/archives/2020/09/</link>
    <description>Recent content in 2020/09 on leeyang1990</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/archives/2020/09/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>创建Entity</title>
      <link>/%E5%88%9B%E5%BB%BAentity/</link>
      <pubDate>Mon, 07 Sep 2020 17:16:02 +0800</pubDate>
      
      <guid>/%E5%88%9B%E5%BB%BAentity/</guid>
      <description>1.通过预制体创建entity using Unity.Entities; using Unity.Mathematics; using Unity.Transforms; using UnityEngine; public class Spawner_FromMonoBehaviour : MonoBehaviour { public GameObject Prefab; void Start(){ var settings = GameObjectConversionSettings.FromWorld(World.DefaultGameObjectInjectionWorld, null); var prefab = GameObjectConversionUtility.ConvertGameObjectHierarchy(Prefab, settings); var entityManager = World.DefaultGameObjectInjectionWorld.EntityManager; for (var x = 0; x &amp;lt; 100; x++) { for (var y = 0; y &amp;lt; 100; y++) { // Efficiently instantiate a bunch of entities from the already converted entity prefab var instance = entityManager.Instantiate(prefab); // Place the instantiated entity in a grid with some noise var position = transform.TransformPoint(new float3(x * 1.3F, noise.cnoise(new float2(x, y) * 0.21F) * 2, y * 1.3F)); entityManager.SetComponentData(instance, new Translation {Value = position}); } } } } 2.ConvertToEntity组件 为节点添加Con</description>
    </item>
    
  </channel>
</rss>